using System.Linq;
using Content.Client.Message;
using Content.Client.UserInterface.Controls;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;

namespace Content.Client._NC.Trade;

[GenerateTypedNameReferences]
public sealed partial class NcStoreMenu : FancyWindow
{
    /* ─────────── события ─────────── */
    public event Action<string>?           OnSearchChanged;
    public event Action<string>?           OnBuyCategoryChanged;
    public event Action<string>?           OnSellCategoryChanged;
    public event Action<StoreListingData>? OnBuyPressed;
    public event Action<StoreListingData>? OnSellPressed;
    public event Action<StoreListingData>? OnExchangePressed;
    /* ─────────── состояние ────────── */
    private readonly List<StoreListingData> _items = new();
    private readonly List<string> _buyCats  = new();
    private readonly List<string> _sellCats = new();

    private string _buyCat  = string.Empty;
    private string _sellCat = string.Empty;
    private string _search  = string.Empty;

    private readonly SpriteSystem      _sprites;
    private readonly IPrototypeManager _proto;

    public NcStoreMenu()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _sprites = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();
        _proto   = IoCManager.Resolve<IPrototypeManager>();

        SearchBar.OnTextChanged += _ =>
        {
            _search = SearchBar.Text.Trim();
            OnSearchChanged?.Invoke(_search);
            RefreshListings();
        };
    }

    /* ────────── API ────────── */
    public void Populate(List<StoreListingData> list)
    {
        _items.Clear();
        _items.AddRange(list);

        _buyCats .Clear(); _sellCats.Clear();
        _buyCats .AddRange(list.Where(i => i.Mode == StoreMode.Buy )
                               .Select(i => i.Category).Distinct().OrderBy(c => c));
        _sellCats.AddRange(list.Where(i => i.Mode == StoreMode.Sell)
                               .Select(i => i.Category).Distinct().OrderBy(c => c));

        if (!_buyCats.Contains(_buyCat))  _buyCat  = string.Empty;
        if (!_sellCats.Contains(_sellCat))_sellCat = string.Empty;

        BuildCategoryButtons();
        RefreshListings();
    }

    public void SetBalance(int balance)
    {
        BalanceLabel.Text = balance.ToString();
        BalanceInfo.SetMarkup($"[font size=14][color=yellow]{balance}[/color][/font]");
    }

    /* ────────── категории ───────── */
    private void BuildCategoryButtons()
    {
        MakeButtons(_buyCats,  BuyCategoryListContainer,  _buyCat,
            cat => { _buyCat  = cat; OnBuyCategoryChanged?.Invoke(cat);  RefreshListings(); });

        MakeButtons(_sellCats, SellCategoryListContainer, _sellCat,
            cat => { _sellCat = cat; OnSellCategoryChanged?.Invoke(cat); RefreshListings(); });
    }

    /* Fallout-palette: выбранная / обычная */
    private static readonly Color CatSelected = new(0xD9, 0xA4, 0x41);
    private static readonly Color CatIdle     = new(0x7C, 0x66, 0x24);

    private static void MakeButtons(IEnumerable<string> cats,
                                    Control parent,
                                    string current,
                                    Action<string> onClick)
    {
        parent.Children.Clear();

        foreach (var c in cats)
        {
            bool chosen = c == current;
            var btn = new Button
            {
                Text                 = c,
                ToggleMode           = true,
                Pressed              = chosen,
                HorizontalExpand     = true,
                ModulateSelfOverride = chosen ? CatSelected : CatIdle
            };
            btn.OnPressed += _ => onClick(c);
            parent.AddChild(btn);
        }
    }

    /* ────────── лоты ───────── */
    private void RefreshListings()
    {
        FillPane(BuyListingsContainer,  StoreMode.Buy,  _buyCat,  d => OnBuyPressed?.Invoke(d));
        FillPane(SellListingsContainer, StoreMode.Sell, _sellCat, d => OnSellPressed?.Invoke(d));
    }

    private void FillPane(Control pane,
                          StoreMode mode,
                          string cat,
                          Action<StoreListingData> emit)
    {
        pane.Children.Clear();

        bool catChosen = !string.IsNullOrEmpty(cat);
        bool hasSearch = !string.IsNullOrWhiteSpace(_search);

        if (!catChosen && !hasSearch)
        {
            pane.AddChild(new Label { Text = "Выберите категорию.",
                                      StyleClasses = { "nc-store__hint" } });
            return;
        }

        IEnumerable<StoreListingData> q = _items.Where(i => i.Mode == mode);

        if (catChosen)
            q = q.Where(i => i.Category == cat);          // строго по категории

        if (hasSearch)
            q = q.Where(i => MatchesSearch(i.ProductEntity)); // поиск

        var filtered = q.ToList();
        if (filtered.Count == 0)
        {
            pane.AddChild(new Label { Text = "Ничего не найдено.",
                                      StyleClasses = { "nc-store__hint" } });
            return;
        }

        foreach (var it in filtered)
        {
            var ctrl = new NcStoreListingControl(it, _sprites);
            if (mode == StoreMode.Buy)
                ctrl.OnBuyPressed  += () => emit(it);
            else
                ctrl.OnSellPressed += () => emit(it);
            pane.AddChild(ctrl);
        }
    }

    /* ────────── поиск ───────── */
    private bool MatchesSearch(string protoId)
    {
        if (string.IsNullOrWhiteSpace(_search))
            return true;

        if (!_proto.TryIndex<EntityPrototype>(protoId, out var p))
            return false;

        var s = _search.ToLowerInvariant();
        return (p.Name ?? string.Empty).ToLowerInvariant().Contains(s) ||
               (p.Description ?? string.Empty).ToLowerInvariant().Contains(s);
    }
}
