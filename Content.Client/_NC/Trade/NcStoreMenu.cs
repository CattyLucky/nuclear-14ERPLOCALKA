using Content.Client.UserInterface.Controls;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using Content.Client.Message;
using Robust.Shared.Prototypes;

namespace Content.Client._NC.Trade
{
    [GenerateTypedNameReferences]
    public sealed partial class NcStoreMenu : FancyWindow
    {
        public event Action<string>? OnSearchChanged;
        public event Action<string>? OnBuyCategoryChanged;
        public event Action<string>? OnSellCategoryChanged;
        public event Action<StoreListingData>? OnBuyPressed;
        public event Action<StoreListingData>? OnSellPressed;
        public event Action<StoreListingData>? OnExchangePressed;

        private List<StoreListingData> _currentListings = new();
        private List<string> _buyCategories = new();
        private List<string> _sellCategories = new();
        public string CurrentBuyCategory = string.Empty;
        public string CurrentSellCategory = string.Empty;
        public string SearchText = string.Empty;

        public NcStoreMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            SearchBar.OnTextChanged += _ =>
            {
                SearchText = SearchBar.Text.Trim();
                OnSearchChanged?.Invoke(SearchText);
                UpdateListings();
            };
        }

        public void Populate(List<StoreListingData> listings)
        {
            _currentListings = listings;

            _buyCategories = listings
                .Where(l => l.Mode == StoreMode.Buy)
                .Select(l => l.Category)
                .Distinct()
                .OrderBy(x => x)
                .ToList();

            _sellCategories = listings
                .Where(l => l.Mode == StoreMode.Sell)
                .Select(l => l.Category)
                .Distinct()
                .OrderBy(x => x)
                .ToList();

            PopulateBuyCategoryButtons();
            PopulateSellCategoryButtons();

            if (string.IsNullOrEmpty(CurrentBuyCategory) && _buyCategories.Count > 0)
                CurrentBuyCategory = _buyCategories[0];
            if (string.IsNullOrEmpty(CurrentSellCategory) && _sellCategories.Count > 0)
                CurrentSellCategory = _sellCategories[0];

            UpdateListings();
        }

        private void PopulateBuyCategoryButtons()
        {
            BuyCategoryListContainer.Children.Clear();
            foreach (var cat in _buyCategories)
            {
                var button = new Button
                {
                    Text = cat,
                    ToggleMode = true,
                    Pressed = (cat == CurrentBuyCategory),
                    HorizontalExpand = true,
                };
                button.OnPressed += _ =>
                {
                    CurrentBuyCategory = cat;
                    OnBuyCategoryChanged?.Invoke(cat);
                    UpdateListings();
                };
                BuyCategoryListContainer.AddChild(button);
            }
        }

        private void PopulateSellCategoryButtons()
        {
            SellCategoryListContainer.Children.Clear();
            foreach (var cat in _sellCategories)
            {
                var button = new Button
                {
                    Text = cat,
                    ToggleMode = true,
                    Pressed = (cat == CurrentSellCategory),
                    HorizontalExpand = true,
                };
                button.OnPressed += _ =>
                {
                    CurrentSellCategory = cat;
                    OnSellCategoryChanged?.Invoke(cat);
                    UpdateListings();
                };
                SellCategoryListContainer.AddChild(button);
            }
        }

        private void UpdateListings()
        {
            // Покупка
            BuyListingsContainer.Children.Clear();
            var buyFiltered = _currentListings
                .Where(l => l.Mode == StoreMode.Buy && l.Category.Contains(CurrentBuyCategory))
                .Where(l => FilterBySearch(l.ProductEntity, SearchText))
                .ToList();

            if (buyFiltered.Count == 0)
            {
                BuyListingsContainer.AddChild(new Label { Text = "Нет товаров." });
            }
            else
            {
                var spriteSystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();
                foreach (var entry in buyFiltered)
                {
                    var control = new NcStoreListingControl(entry, spriteSystem);
                    control.OnBuyPressed += () => OnBuyPressed?.Invoke(entry);
                    BuyListingsContainer.AddChild(control);
                }
            }

            // Продажа
            SellListingsContainer.Children.Clear();
            var sellFiltered = _currentListings
                .Where(l => l.Mode == StoreMode.Sell && l.Category.Contains(CurrentSellCategory))
                .Where(l => FilterBySearch(l.ProductEntity, SearchText))
                .ToList();

            if (sellFiltered.Count == 0)
            {
                SellListingsContainer.AddChild(new Label { Text = "Нет товаров." });
            }
            else
            {
                var spriteSystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();
                foreach (var entry in sellFiltered)
                {
                    var control = new NcStoreListingControl(entry, spriteSystem);
                    control.OnSellPressed += () => OnSellPressed?.Invoke(entry);
                    SellListingsContainer.AddChild(control);
                }
            }
        }

        /// <summary>
        /// Поиск по имени и описанию, вытянутым из прототипа по protoId.
        /// </summary>
        private static bool FilterBySearch(string protoId, string searchText)
        {
            if (string.IsNullOrWhiteSpace(searchText))
                return true;

            var protoManager = IoCManager.Resolve<IPrototypeManager>();
            if (!protoManager.TryIndex<EntityPrototype>(protoId, out var proto))
                return false;

            var name = proto.Name ?? string.Empty;
            var desc = proto.Description ?? string.Empty;
            searchText = searchText.ToLowerInvariant();
            return name.ToLowerInvariant().Contains(searchText) ||
                   desc.ToLowerInvariant().Contains(searchText);
        }

        public void SetBalance(int balance)
        {
            BalanceLabel.Text = balance.ToString();
            BalanceInfo.SetMarkup($"[color=yellow]{balance}[/color]");
        }
    }
}
