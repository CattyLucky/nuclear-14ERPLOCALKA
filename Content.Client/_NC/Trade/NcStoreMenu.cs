using Content.Client.UserInterface.Controls;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using System.Linq;
using Content.Client.Message;


namespace Content.Client._NC.Trade
{
    [GenerateTypedNameReferences]
    public sealed partial class NcStoreMenu : FancyWindow
    {
        public event Action<string>? OnSearchChanged;
        public event Action<string>? OnCategoryChanged;
        public event Action<StoreListingData>? OnBuyPressed;
        public event Action<StoreListingData>? OnSellPressed;
        public event Action<StoreListingData>? OnExchangePressed;

        private List<StoreListingData> _currentListings = new();
        private List<string> _categories = new();
        public string CurrentCategory = string.Empty;
        public string SearchText = string.Empty;

        public NcStoreMenu()
        {
            RobustXamlLoader.Load(this);
            IoCManager.InjectDependencies(this);

            // Поиск
            SearchBar.OnTextChanged += _ =>
            {
                SearchText = SearchBar.Text.Trim();
                OnSearchChanged?.Invoke(SearchText);
                UpdateListings();
            };
        }

        /// <summary>
        /// Основной метод обновления магазина — вызывай при каждом новом состоянии!
        /// </summary>
        public void Populate(List<StoreListingData> listings)
        {
            _currentListings = listings;

            // Категории из всех товаров
            _categories = listings.SelectMany(l => l.Categories).Distinct().OrderBy(x => x).ToList();
            PopulateCategoryButtons();

            // Категория по умолчанию
            if (string.IsNullOrEmpty(CurrentCategory) && _categories.Count > 0)
                CurrentCategory = _categories[0];

            UpdateListings();
        }

        /// <summary>
        /// Рендерит кнопки категорий
        /// </summary>
        private void PopulateCategoryButtons()
        {
            CategoryListContainer.Children.Clear();
            foreach (var cat in _categories)
            {
                var button = new Button
                {
                    Text = cat,
                    ToggleMode = true,
                    Pressed = (cat == CurrentCategory),
                    HorizontalExpand = true,
                    StyleClasses = { "OpenBoth", }
                };
                button.OnPressed += _ =>
                {
                    CurrentCategory = cat;
                    OnCategoryChanged?.Invoke(cat);
                    UpdateListings();
                };
                CategoryListContainer.AddChild(button);
            }
        }

        /// <summary>
        /// Главная фильтрация и отображение товаров
        /// </summary>
        private void UpdateListings()
        {
            StoreListingsContainer.Children.Clear();
            var search = SearchText.ToLowerInvariant();

            // Категория фильтра
            var filtered = _currentListings
                .Where(l => l.Categories.Contains(CurrentCategory))
                .Where(l => string.IsNullOrWhiteSpace(search) ||
                    l.Name.ToLowerInvariant().Contains(search) ||
                    (l.Description).ToLowerInvariant().Contains(search))
                .ToList();

            if (filtered.Count == 0)
            {
                StoreListingsContainer.AddChild(new Label { Text = "Нет товаров.", });
                return;
            }

            var spriteSystem = IoCManager.Resolve<IEntitySystemManager>().GetEntitySystem<SpriteSystem>();

            foreach (var entry in filtered)
            {
                var control = new NcStoreListingControl(entry, spriteSystem);
                control.OnBuyPressed += () => OnBuyPressed?.Invoke(entry);
                control.OnSellPressed += () => OnSellPressed?.Invoke(entry);
                control.OnExchangePressed += () => OnExchangePressed?.Invoke(entry);
                StoreListingsContainer.AddChild(control);
            }
        }

        /// <summary>
        /// Для обновления баланса и баланса в футере
        /// </summary>
        public void SetBalance(int balance)
        {
            BalanceLabel.Text = balance.ToString();
            BalanceInfo.SetMarkup($"[color=yellow]{balance}[/color]");
        }
    }
}

