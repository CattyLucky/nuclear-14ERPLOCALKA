using Content.Client.Resources;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Prototypes;
using Robust.Shared.Timing;
using Robust.Client.ResourceManagement;
using Robust.Shared.Utility;


namespace Content.Client._NC.Trade;

[GenerateTypedNameReferences]
public sealed partial class NcStoreItemControl : Control
{
    public event Action<string>? OnBuyPressed;

    [Dependency] private readonly IPrototypeManager _prototype = null!;
    [Dependency] private readonly IResourceCache _res = null!;

    private readonly ClientListingData _data;

    private readonly bool _hasBalance;
    private readonly string _price;
    private readonly string _discount;

    public NcStoreItemControl(ClientListingData data, string price, string discount, bool hasBalance, Texture? texture = null)
    {
        IoCManager.InjectDependencies(this);
        RobustXamlLoader.Load(this);

        _data = data;
        _hasBalance = hasBalance;
        _price = price;
        _discount = discount;

        StoreItemName.Text = data.Name;
        StoreItemDescription.SetMessage(data.Description);

        UpdateBuyButtonText();
        StoreItemBuyButton.Disabled = !CanBuy();

        StoreItemTexture.Texture = texture;

        StoreItemBuyButton.OnPressed += _ => OnBuyPressed?.Invoke(_data.Id);
    }

    private bool CanBuy()
    {
        if (!_hasBalance)
            return false;

        return _data.CategoryMode != StoreMode.Buy || _data.Price <= 0 || _data.Price > 0;
    }

    private void UpdateBuyButtonText()
    {
        DiscountSubText.Text = _discount;
        StoreItemPrice.Text = _price;

        if (_prototype.TryIndex<CurrencyPrototype>(_data.CurrencyId, out var currency))
        {
            if (currency.Icon is SpriteSpecifier.Texture tex)
                CurrencyIcon.Texture = _res.GetTexture(tex.TexturePath);
            else
                CurrencyIcon.Texture = null;
        }
        else
            CurrencyIcon.Texture = null;
    }

    private void UpdateName() => StoreItemName.Text = _data.Name;

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        UpdateBuyButtonText();
        UpdateName();
        StoreItemBuyButton.Disabled = !CanBuy();
    }
}
