using Content.Client._NC.Trade.UI.Controls;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.XAML;
using Robust.Client.UserInterface.CustomControls;
using Content.Shared._NC.Trade.UiDto;
using Robust.Client.UserInterface;
using Robust.Shared.Prototypes;

namespace Content.Client._NC.Trade.UI.Windows;

/// <summary>
/// Главное окно структурированного магазина (Купить / Продать / Обмен).
/// </summary>
[GenerateTypedNameReferences]
public sealed partial class NcStoreStructuredMenu : DefaultWindow
{
    public NcStoreStructuredMenu()
    {
        RobustXamlLoader.Load(this);
    }

    public void SetBalance(int amount) => BalanceValue.Text = amount.ToString();

    public void PopulateBuyListings(IEnumerable<StoreListingData> data, IPrototypeManager protos)
        => PopulateListings(BuyList, data, protos, NcStoreListingControl.ListingMode.Buy, OnBuyClicked);

    public void PopulateSellListings(IEnumerable<StoreListingData> data, IPrototypeManager protos)
        => PopulateListings(SellList, data, protos, NcStoreListingControl.ListingMode.Sell, OnSellClicked);

    public void PopulateExchangeListings(IEnumerable<StoreListingData> data, IPrototypeManager protos)
        => PopulateListings(ExchangeList, data, protos, NcStoreListingControl.ListingMode.Exchange, OnExchangeClicked);

    private void PopulateListings(
        Control list,
        IEnumerable<StoreListingData> data,
        IPrototypeManager protos,
        NcStoreListingControl.ListingMode mode,
        Action<string>? onClicked
    )
    {
        list.DisposeAllChildren();

        foreach (var d in data)
        {
            var ctrl = new NcStoreListingControl();
            ctrl.SetListing(
                Loc.GetString($"store-listing-name-{d.ProtoId}"),
                d.Price,
                null, // иконка если нужно
                null, // описание если нужно
                mode
            );

            switch (mode)
            {
                case NcStoreListingControl.ListingMode.Buy:
                    if (onClicked != null)
                        ctrl.OnBuyPressed += () => onClicked(d.ProtoId);
                    break;
                case NcStoreListingControl.ListingMode.Sell:
                    if (onClicked != null)
                        ctrl.OnSellPressed += () => onClicked(d.ProtoId);
                    break;
                case NcStoreListingControl.ListingMode.Exchange:
                    if (onClicked != null)
                        ctrl.OnExchangePressed += () => onClicked(d.ProtoId);
                    break;
            }

            list.AddChild(ctrl);
        }
    }

    public event Action<string>? OnBuyClicked;
    public event Action<string>? OnSellClicked;
    public event Action<string>? OnExchangeClicked;
}
