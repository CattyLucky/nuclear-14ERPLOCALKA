using System.Linq;
using Content.Shared._NC.Trade;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;

namespace Content.Client._NC.Trade;

[GenerateTypedNameReferences]
public sealed partial class StoreStructuredMenu : DefaultWindow
{
    private StoreMode _currentMode = StoreMode.Buy;
    private string _selectedCategory = "–í—Å–µ";
    private string _searchText = string.Empty;

    private readonly Dictionary<string, Button> _categoryButtons = new();
    private List<StoreListingData> _allListings = new();
    private Action<string>? _onBuy;

    public StoreStructuredMenu()
    {
        RobustXamlLoader.Load(this);

        BuyTab.OnPressed += _ => SwitchMode(StoreMode.Buy);
        SellTab.OnPressed += _ => SwitchMode(StoreMode.Sell);

        SearchBar.OnTextChanged += _ =>
        {
            _searchText = SearchBar.Text;
            RefreshItems();
        };
    }

    public void Setup(List<StoreListingData> listings, int balance, Action<string> onBuyCallback)
    {
        _allListings = listings;
        _onBuy = onBuyCallback;
        BalanceLabel.Text = $"üí∞ {balance}";

        GenerateCategories();
        RefreshItems();
    }

    private void SwitchMode(StoreMode mode)
    {
        _currentMode = mode;
        _selectedCategory = "–í—Å–µ";
        GenerateCategories();
        RefreshItems();
    }

    private void GenerateCategories()
    {
        CategoryBar.Children.Clear();
        _categoryButtons.Clear();

        var categories = new HashSet<string> { "–í—Å–µ", };

        foreach (var listing in _allListings)
        {
            if (listing.CategoryMode != _currentMode)
                continue;

            categories.Add(listing.Category);
        }

        foreach (var category in categories.OrderBy(c => c))
        {
            var button = new Button
            {
                Text = category,
                ToggleMode = true,
                Pressed = category == _selectedCategory
            };

            button.OnPressed += _ =>
            {
                _selectedCategory = category;

                // –æ–±–Ω–æ–≤–∏–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                foreach (var (cat, btn) in _categoryButtons)
                    btn.Pressed = cat == category;

                RefreshItems();
            };

            CategoryBar.AddChild(button);
            _categoryButtons[category] = button;
        }
    }


    private void RefreshItems()
    {
        ItemList.Children.Clear();

        foreach (var listing in _allListings)
        {
            if (listing.CategoryMode != _currentMode)
                continue;

            if (_selectedCategory != "–í—Å–µ" && listing.Category != _selectedCategory)
                continue;

            if (!string.IsNullOrEmpty(_searchText) &&
                !listing.Name.Contains(_searchText, StringComparison.OrdinalIgnoreCase) &&
                !listing.Description.Contains(_searchText, StringComparison.OrdinalIgnoreCase))
                continue;

            var data = new ClientListingData
            {
                Id = listing.Id,
                Name = listing.Name,
                Description = listing.Description,
                Icon = listing.Icon,
                Price = listing.Price,
                Category = listing.Category,
                CategoryMode = listing.CategoryMode
            };

            var control = new NcStoreItemControl(
                data,
                price: (listing.CategoryMode == StoreMode.Sell ? "+" : "-") + listing.Price.ToString(),
                discount: string.Empty,
                hasBalance: true
            );


            control.OnBuyPressed += id => _onBuy?.Invoke(id);

            ItemList.AddChild(control);
        }
    }
}
